#define M_PI 3.14159265359
#define M_1_PI 0.318309886183790671538

#define ALLOW_SEPARATE_MRAO 1 // Set this to 0 for production builds, same in pbr shaders
#define NUM_POINT_LIGHTS 8

#ifdef __cplusplus
// Only compiled with c++
#pragma once

typedef glm::vec2 float2;
typedef glm::vec3 float3;
typedef glm::vec4 float4;
typedef glm::mat3x3 float3x3;
typedef glm::mat4x4 float4x4;
typedef glm::u32vec2 uint2;
typedef glm::u32vec3 uint3;
typedef UINT32 uint;
#endif

namespace ShaderShared {
struct PointLight {
	float3 color;
    float attRadius;
	float3 fragToLight;
	float intensity;
};

struct DirectionalLight {
	float3 color;
	float intensity;
	float3 direction;
	float padding;
};

struct PBRMaterial {
	float4 modelColor;
	
	float metalnessScale;
	float roughnessScale;
	float aoIntensity;
	int albedoTexIndex;
	
	int normalTexIndex;
	int mraoTexIndex; // R/G/B = Metalness/Roughness/Ambient occlusion
	int radianceMapTexIndex;
	int irradianceMapTexIndex;

#if ALLOW_SEPARATE_MRAO
		int metalnessTexIndex;
		int roughnessTexIndex;

		int aoTexIndex;
		float padding;
#endif

	int brdfLutTexIndex;
	float3 padding2;
};

struct PhongMaterial {
	float4 modelColor;
	float ka;
	float kd;
	float ks;
	float shininess;
	int diffuseTexIndex;
	int normalTexIndex;
	int specularTexIndex;
	float padding;
};

struct PhongInput {
	PhongMaterial mat;
	float4 diffuseColor;
	float3 normal;
	float3 specMap;
	float3 fragToCam;
	
	DirectionalLight dirLight;
    PointLight pointLights[NUM_POINT_LIGHTS];
};

}