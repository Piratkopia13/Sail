#ifndef __DXR_SHRD_HLSL__
#define __DXR_SHRD_HLSL__

#ifdef HLSL
// Shader only

#define MERGE(a, b) a##b

#define PI 3.14159265359
#define M_1_PI 0.318309886183790671538

#else
// C++ only

#pragma once

typedef glm::vec2 float2;
typedef glm::vec3 float3;
typedef glm::vec4 float4;
typedef glm::mat3x3 float3x3;
typedef glm::mat4x4 float4x4;
typedef glm::mat4x4 matrix;
typedef glm::u32vec2 uint2;
typedef glm::u32vec3 uint3;
typedef UINT32 uint;

namespace DXRShaderCommon {

#endif

static const uint MESH_NO_FLAGS			= 	0;
static const uint MESH_USE_INDICES 		= 	1 << 0;
static const uint MESH_HAS_ALBEDO_TEX 	= 	1 << 1;
static const uint MESH_HAS_NORMAL_TEX 	= 	1 << 2;
static const uint MESH_HAS_MRAO_TEX	    = 	1 << 3;

struct ShadowRayPayload {
	bool isHit;
};

// Properties set once per instance
// Mainly material stuff
struct InstanceData {
	float4 color;
    float metalnessScale;
    float roughnessScale;
    float aoIntensity;
	int flags;
};

#ifndef HLSL
// C++ only

} // End namespace

#endif

#endif // __DXR_SHRD_HLSL__